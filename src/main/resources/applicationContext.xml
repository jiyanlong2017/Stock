<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd


       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">
    <description>Spring公共配置</description>

    <!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
    <context:component-scan base-package="com.stock.xxx">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation"
                                expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <!-- 外部properties文件位置 -->
    <context:property-placeholder ignore-resource-not-found="true"
                                  location="classpath*:/application.properties"/>

    <!--Spring帮助类-->
   <!-- <bean id="springUtils" class="com.stock.xxx.utils.SpringUtils"/>-->

    <!-- *****************************dao config begin***************************** -->
    <!-- 配置数据源dataSource -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" >
        <!-- Connection Info -->
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- Connection Pooling Info -->
        <property name="minPoolSize" value="10"/>
        <property name="maxPoolSize" value="100"/>
        <property name="initialPoolSize" value="10"/>
        <property name="maxIdleTime" value="0"/>
        <property name="acquireIncrement" value="100"/>
    </bean>

    <!-- 配置JPush推送帮助类 -->
    <!--<bean id="pushManager" class="com.hlg.xxx.common.PushManager">
        <constructor-arg index="0" value="${jpush.appKey}"/>
        <constructor-arg index="1" value="${jpush.masterSecret}"/>
    </bean>-->

    <!--配置Spring JDBC模板，用于直接sql访问-->
    <bean
            class="org.springframework.jdbc.core.JdbcTemplate"
            p:dataSource-ref="dataSource"/>

    <!-- Jpa Entity Manager 配置 -->
    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
          p:packagesToScan="com.stock.xxx.model"
          p:dataSource-ref="dataSource"
          p:jpaVendorAdapter-ref="hibernateJpaVendorAdapter"/>

    <!--<util:map id="jpaPropertyMap">-->
    <!--<entry key="hibernate.dialect" value="org.hibernate.dialect.SQLServerDialect"/>-->
    <!--<entry key="hibernate.hbm2ddl.auto" value="update"/>-->
    <!--<entry key="hibernate.show_sql" value="true" />-->
    <!--<entry key="hibernate.format_sql" value="true" />-->

    <!--<entry key="hibernate.query.substitutions" value="true 1, false 0"/>-->
    <!--<entry key="hibernate.default_batch_fetch_size" value="16"/>-->
    <!--<entry key="hibernate.max_fetch_depth" value="2"/>-->
    <!--<entry key="hibernate.generate_statistics" value="true"/>-->
    <!--<entry key="hibernate.bytecode.use_reflection_optimizer" value="true"/>-->
    <!--<entry key="hibernate.cache.use_second_level_cache" value="false"/>-->
    <!--<entry key="hibernate.cache.use_query_cache" value="false"/>-->
    <!--</util:map>-->

    <bean id="hibernateJpaVendorAdapter"
          class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
          p:generateDdl="${hibernate.generateDdl}"
          p:database="${hibernate.database}"
          p:databasePlatform="${hibernate.dialect}"
          p:showSql="${hibernate.show_sql}"
            />

    <!-- Jpa配置, 扫描base-package下所有继承于Repository<T,ID>的接口 -->
    <jpa:repositories
            base-package="com.stock.xxx.dao"
            transaction-manager-ref="transactionManager"
            entity-manager-factory-ref="entityManagerFactory"/>

    <!-- 事务管理器配置, Jpa单数据源事务 -->
    <bean id="transactionManager"
          class="org.springframework.orm.jpa.JpaTransactionManager"
          p:entityManagerFactory-ref="entityManagerFactory"/>


    <!-- 启用@Transactional标注 -->
    <!--<tx:annotation-driven proxy-target-class="true"-->
    <!--transaction-manager="transactionManager" />-->

    <!--开启@AspectJ注解-->
    <aop:aspectj-autoproxy expose-proxy="true" proxy-target-class="true"/>

    <!--定义事务切面-->
    <aop:config expose-proxy="true" proxy-target-class="true">
        <!-- 只对业务逻辑层实施事务 -->
        <aop:pointcut id="txPointcut" expression="execution(* com.stock.xxx.service..*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--查询类方法-->
            <tx:method name="get*" read-only="true" propagation="REQUIRED"/>
            <tx:method name="find*" read-only="true" propagation="REQUIRED"/>
            <tx:method name="is*" read-only="true" propagation="REQUIRED"/>
            <tx:method name="exist*" read-only="true" propagation="REQUIRED"/>
            <tx:method name="count*" read-only="true" propagation="REQUIRED"/>
            <tx:method name="check*" read-only="true" propagation="REQUIRED"/>

            <!--更新类方法-->
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="create*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="set*" propagation="REQUIRED"/>
            <tx:method name="modify*" propagation="REQUIRED"/>
            <tx:method name="send*" propagation="REQUIRED"/>
            <tx:method name="reg*" propagation="REQUIRED"/>
            <tx:method name="do*" propagation="REQUIRED"/>
            <tx:method name="write*" propagation="REQUIRED"/>


            <!--默认其他方法都是REQUIRED、ReadOnly-->
            <tx:method name="*" read-only="true" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <!-- *****************************dao config end***************************** -->


    <!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->
    <!--<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
          p:defaultEncoding="UTF-8"
          p:maxUploadSize="20000000"
          p:uploadTempDir="/static/temp"/>-->

    <!-- 多线程处理 -->
   <task:executor id="taskExecutor"
                  pool-size="${task.pool_size}"
                  queue-capacity="${task.queue_capacity}"
                  keep-alive="${task.keep_alive}" />
    <task:annotation-driven executor="taskExecutor" />

</beans>